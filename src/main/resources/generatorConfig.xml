<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--导入属性配置-->
    <properties resource="generator.properties"></properties>

    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="mysql" targetRuntime="MyBatis3">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 自定义生成策略 plugin可以有多个-->
        <plugin type="com.criss.wang.mybatis.generator.MyGeneratorPlugin">
            <property name="hasLombok" value="true"/>
        </plugin>

        <!--添加数据库的注释到实体类-->
        <!--        <commentGenerator>-->
        <!--            &lt;!&ndash; 将数据库中表的字段描述信息添加到注释 &ndash;&gt;-->
        <!--            <property name="addRemarkComments" value="true"/>-->
        <!--            &lt;!&ndash; 注释里不添加日期 &ndash;&gt;-->
        <!--            <property name="suppressDate" value="true"/>-->
        <!--        </commentGenerator>-->

        <!-- 添加数据库的注释到实体类（自定义） -->
        <commentGenerator type="com.criss.wang.mybatis.generator.MyCommentGenerator">
            <property name="suppressAllComments" value="false"/><!-- 是否取消注释 生成注释为false 不生成为true 【不生成注释时会被重复写入导致报错】-->
            <property name="suppressDate" value="true"/> <!-- 生成的注释包含时间戳 -->
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userId}"
                password="${jdbc.password}">
        </jdbcConnection>

        <!-- 不应强制使用BigDecimal字段 - 这意味着如果可能，将替换整数类型（Short，Integer，Long等）。此功能旨在使数据库DECIMAL和NUMERIC列更易于处理-->
        <javaTypeResolver>
            <!--  true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                  false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；  -->
            <property name ="forceBigDecimals" value ="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.criss.wang.mybatis.model"
                            targetProject="src/main/java">

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 设置一个根对象，
                           如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
                           注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                               1，属性名相同，类型相同，有相同的getter/setter方法；-->
            <property name="rootClass" value="com.criss.wang.mybatis.base.BaseEntity"/>
        </javaModelGenerator>

        <!--在resources目录下的mapper文件，生成数据库的表对应的xml文件 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成dao层的java代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <!--                <javaClientGenerator targetPackage="com.criss.wang.mybatis.Mapper"-->
        <!--                                     targetProject="src/main/java" type="ANNOTATEDMAPPER">-->
        <!--                    <property name="enableSubPackages" value="false"/>-->
        <!--                </javaClientGenerator>-->
        <javaClientGenerator targetPackage="com.criss.wang.mybatis.XmlMapper"
                             targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 数据表名及实体类名称  -->
        <table tableName="TB_TASK_HISTORY" domainObjectName="TaskHistory"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!-- generatedKey用于生成生成主键的方法，
               如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
               column:主键的列名；
               sqlStatement：要生成的selectKey语句，有以下可选项：
                   Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                   DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                   DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                   Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                   HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
                   Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                   MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                   SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                   SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
                   JDBC（这个适用于上面没有表明的数据库，比如Postgresql）      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
              -->
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>

            <!--
                该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
                比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
                那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
                custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

                注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
                如果使用了columnOverride元素，该属性无效；

            <columnRenamingRule searchString="" replaceString=""/>
             -->

            <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
               column:指定要忽略的列的名字；
               delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false
                注意，一个table元素中可以有多个ignoreColumn元素
             -->
            <ignoreColumn column="media_num" delimitedColumnName=""/>
        </table>
        <table tableName="TB_TASK_MEDIA" domainObjectName="TaskMedia"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>


    </context>
</generatorConfiguration>